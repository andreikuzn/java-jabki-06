public class Main {
    public static void main(String[] args) {
        /**
         * Основы ООП (см класс Book)
         */

        /**
         * Объект — это экземпляр класса, созданный на основе его описания.
         * Класс это шаблон для создания объектов, а объект это экземпляр класса
         */
        Book book = new Book();
        book.displayInfo();

        book.title = "Философия Java";
        book.author = "Брюс Эккель";
        book.pageCount = 1168;

        book.displayInfo();

        /**
         * Констуркуторы
         * 1) Конструктор по-умолчанию
         * 2) Конструкторы с параметрами
         */

        /**
         * Конструктор — это специальный метод, который вызывается при создании объекта класса
         * и используется для инициализации его состояния (переменных экземпляра).
         *
         * Основные свойства конструктора:
         * 1) Имеет то же имя, что и класс
         * 2) Не имеет возвращаемого типа (даже void)
         * 3) Может быть с параметрами или без параметров
         * 4) Может быть несколько (перегрузка)
         *
         * По-умолчанию будет создан пустой конструктор Book book = new Book();
         *
         * (см класс Person)
         */
        Person person = new Person();
        person.displayInfo();

        person = new Person("Полина");
        person.displayInfo();

        person = new Person("Иоанн", 100);
        person.displayInfo();

        /**
         * Зачем нужны конструкторы?
         * - Чтобы гарантировать начальное состояние объекта
         * - Чтобы упростить инициализацию (не нужно писать setName, setAge отдельно)
         * - Чтобы разделить логику создания объектов с разными наборами данных
         * - Чтобы сделать код читабельнее и безопаснее
         */

        /**
         * Модификаторы доступа
         */

        /**
         * Модификаторы доступа (Access Modifiers) определяют, кто может использовать (видеть, вызывать, изменять) поля, методы и классы.
         *
         * public — доступен всем
         * private — доступен только внутри самого класса
         * protected — доступен внутри класса, пакета и наследникам
         * (пустой, package-private) — доступен только в пределах одного пакета
         */

        /**
         * Зачем нужны модификаторы доступа?
         * - Для организации кода и управления видимостью
         * - Чтобы изолировать внутреннее состояние объектов
         * - Для контроля над изменениями (можно валидировать ввод в set-методах).
         * - Повышают безопасность и читаемость кода
         */

        /**
         * Почему важно делать поля private?
         * Это основа инкапсуляции — одного из принципов ООП
         * Инкапсуляция — это сокрытие внутренней реализации объекта и предоставление к нему ограниченного доступа через открытые методы
         * Если поля public — объекту можно присвоить любое значение, даже некорректное
         * Делая поля private, ты контролируешь доступ к ним через get и set методы
         */

        /**
         * Полный алгоритм
         * 1) Поля (данные) делают private — скрыты внутри
         * 2) Доступ к полям дают через public методы — get и set
         * 3) В set методах (и констркторах) можно проверять значения, прежде чем их сохранить
         *
         * (см класс Account)
         */
        Account account = new Account();
        //account.balance
        System.out.println(account.getBalance());

        account.deposit(100);
        System.out.println(account.getBalance());
        account.deposit(80);
        System.out.println(account.getBalance());

        account.deposit(-100);
        System.out.println(account.getBalance());

        account.withdraw(100);
        System.out.println(account.getBalance());
        account.withdraw(80);
        System.out.println(account.getBalance());
        account.withdraw(1);
        System.out.println(account.getBalance());

        /**
         * Примеры из реальной жизни
         * 1) Банкомат
         * Внутри — сложная логика и деньги (это "приватные поля")
         * Снаружи — ты можешь только нажимать кнопки (это "публичные методы")
         * Ты не можешь напрямую достать купюры изнутри
         *
         * 2) Автомобиль
         * Ты не управляешь двигателем напрямую
         * Ты используешь педали, руль, коробку передач — это "интерфейс"
         * Начинка автомобиля (двигатель и т.д.) — инкапсулирована
         */

        /**
         * Зачем нужна инкапсуляция?
         * Безопасность — нельзя сломать объект неправильными действиями.
         * Гибкость — можно менять внутреннюю реализацию, не меняя внешний интерфейс
         * Контроль — можно добавлять проверку, логи, ограничения
         * Поддержка принципов ООП — чистота архитектуры, удобство масштабирования
         */
    }
}